inte k[64];
inte s[64];
inte bloco[16];
inte hash[4];
inte h[4];
inte n = 0;
inte i = 0;
inte j = 0;
inte l = 0;
inte m = 0;
inte f = 0;
inte g = 0;
inte yes = 0;
inte and.i = 0;
inte and.k = 0;
inte and.c = 0;
inte or.i = 0;
inte or.k = 0;
inte or.c = 0;
inte xor.i = 0;
inte xor.k = 0;
inte xor.c = 0;
inte lrot.i = 0;

inte main()
{
    yes = 1;
    {
        escreva "processar hash (y=1 / n=0)? ";
        yes = entrada;
        entaum
            md5()
        se (yes != 0);
    } enquanto (yes != 0);
}

inte md5()
{
    init_s();
    init_k();
    init_hash();

    escreva "tamanho da mensagem: ";
    n = entrada;
    
    escreva "palavras da entrada:\n";
    
    i = 0;
    {
        j = 0;
        {
            bloco[j] = entrada;
            j = j + 1;
        } enquanto (j < 16);
        processar_bloco();
        i = i + j;
    } enquanto (i < (n / 16 * 16));

    j = 0;
    {
        bloco[j] = entrada;
        j = j + 1;
    } enquanto (j < (n - i));

    entaum
    {
        {
            bloco[j] = 0;
            j = j + 1;
        } enquanto (j < 16);
        j = 0;
        processar_bloco();
    } se (j > 14);

    {
        bloco[j] = 0;
        j = j + 1;
    } enquanto (j < 14);

    bloco[j] = n * 4294967296 / 4294967296;
    bloco[j + 1] = n / 4294967296;
    processar_bloco();

    escreva "palavras da hash:\n";
    i = 0;
    {
        hash[i] = i64_to_u32(hash[i]);
        escreva hash[i] '\n';
        i = i + 1;
    } enquanto (i < 4);
}

inte processar_bloco()
{
    l = 0;
    {
        h[l] = hash[l];
        l = l + 1;
    } enquanto (l < 4);

    m = 0;
    {
        entaum
        {
            f = or32(and32(h[1] h[2]) and32(0 - h[1] - 1 h[3]));
            g = m;
        }
        senaum 
            entaum
            {
                f = or32(and32(h[1] h[3]) and32(0 - h[3] - 1 h[2]));
                g = (5 * m + 1) * 1152921504606846976 / 1152921504606846976;
            }
            senaum
                entaum
                {
                    f = xor32(xor32(h[1] h[2]) h[3]);
                    g = (3 * m + 5) * 1152921504606846976 / 1152921504606846976;
                }
                senaum
                {
                    f = xor32(h[2] or32(h[1] 0 - h[3] - 1));
                    g = 7 * m * 1152921504606846976 / 1152921504606846976;
                }
                se (m < 48)
            se (m < 32)
        se (m < 16);

        f = f + h[0] + k[m] + bloco[g];
        h[0] = h[3];
        h[3] = h[2];
        h[2] = h[1];
        h[1] = h[1] + leftrotate(f, s[m]);

        m = m + 1;
    } enquanto (m < 64);

    m = 0;
    {
        hash[m] = hash[m] + h[m];
        m = m + 1;
    } enquanto (m < 4);
}

inte init_k()
{
    k[0] = 3614090360;
    k[1] = 3905402710;
    k[2] = 606105819;
    k[3] = 3250441966;
    k[4] = 4118548399;
    k[5] = 1200080426;
    k[6] = 2821735955;
    k[7] = 4249261313;
    k[8] = 1770035416;
    k[9] = 2336552879;
    k[10] = 4294925233;
    k[11] = 2304563134;
    k[12] = 1804603682;
    k[13] = 4254626195;
    k[14] = 2792965006;
    k[15] = 1236535329;
    k[16] = 4129170786;
    k[17] = 3225465664;
    k[18] = 643717713;
    k[19] = 3921069994;
    k[20] = 3593408605;
    k[21] = 38016083;
    k[22] = 3634488961;
    k[23] = 3889429448;
    k[24] = 568446438;
    k[25] = 3275163606;
    k[26] = 4107603335;
    k[27] = 1163531501;
    k[28] = 2850285829;
    k[29] = 4243563512;
    k[30] = 1735328473;
    k[31] = 2368359562;
    k[32] = 4294588738;
    k[33] = 2272392833;
    k[34] = 1839030562;
    k[35] = 4259657740;
    k[36] = 2763975236;
    k[37] = 1272893353;
    k[38] = 4139469664;
    k[39] = 3200236656;
    k[40] = 681279174;
    k[41] = 3936430074;
    k[42] = 3572445317;
    k[43] = 76029189;
    k[44] = 3654602809;
    k[45] = 3873151461;
    k[46] = 530742520;
    k[47] = 3299628645;
    k[48] = 4096336452;
    k[49] = 1126891415;
    k[50] = 2878612391;
    k[51] = 4237533241;
    k[52] = 1700485571;
    k[53] = 2399980690;
    k[54] = 4293915773;
    k[55] = 2240044497;
    k[56] = 1873313359;
    k[57] = 4264355552;
    k[58] = 2734768916;
    k[59] = 1309151649;
    k[60] = 4149444226;
    k[61] = 3174756917;
    k[62] = 718787259;
    k[63] = 3951481745;
}

inte init_s()
{
    i = 0;
    {
        s[i] = 7;
        s[i + 1] = 12;
        s[i + 2] = 17;
        s[i + 3] = 22;
        i = i + 4;
    } enquanto (i < 16);

    {
        s[i] = 5;
        s[i + 1] = 9;
        s[i + 2] = 14;
        s[i + 3] = 20;
        i = i + 4;
    } enquanto (i < 32);

    {
        s[i] = 4;
        s[i + 1] = 11;
        s[i + 2] = 16;
        s[i + 3] = 23;
        i = i + 4;
    } enquanto (i < 48);

    {
        s[i] = 6;
        s[i + 1] = 10;
        s[i + 2] = 15;
        s[i + 3] = 21;
        i = i + 4;
    } enquanto (i < 64);
}

inte init_hash()
{
    hash[0] = 1732584193;
    hash[1] = 4023233417;
    hash[2] = 2562383102;
    hash[3] = 271733878;
}

inte bit0(inte bit0.i)
{
    entaum
        retorne 0
    senaum
        retorne 1
    se (bit0.i / 2 * 2 == bit0.i);
}

inte and1(inte and1.a inte and1.b)
{
    entaum
        retorne 1
    senaum
        retorne 0
    se ((bit0(and1.a) == 1) & (bit0(and1.b) == 1));
}

inte and32(inte and32.a inte and32.b)
{
    and.c = 0;
    and.i = 0;
    and.k = 1;
    {
        and.c = and.c + (and1(and32.a and32.b) * and.k);
        and.k = and.k * 2;
        and32.a = and32.a / 2;
        and32.b = and32.b / 2;
        and.i = and.i + 1;
    } enquanto (and.i < 32);

    retorne and.c;
}

inte or1(inte or1.a inte or1.b)
{
    entaum
        retorne 1
    senaum
        retorne 0
    se ((bit0(or1.a) == 1) | (bit0(or1.b) == 1));
}

inte or32(inte or32.a inte or32.b)
{
    or.c = 0;
    or.i = 0;
    or.k = 1;
    {
        or.c = or.c + (or1(or32.a or32.b) * or.k);
        or.k = or.k * 2;
        or32.a = or32.a / 2;
        or32.b = or32.b / 2;
        or.i = or.i + 1;
    } enquanto (or.i < 32);

    retorne or.c;
}

inte xor1(inte xor1.a inte xor1.b)
{
    entaum
        retorne 1
    senaum
        retorne 0
    se (bit0(xor1.a) != bit0(xor1.b));
}

inte xor32(inte xor32.a inte xor32.b)
{
    xor.c = 0;
    xor.i = 0;
    xor.k = 1;
    {
        xor.c = xor.c + (xor1(xor32.a xor32.b) * xor.k);
        xor.k = xor.k * 2;
        xor32.a = xor32.a / 2;
        xor32.b = xor32.b / 2;
        xor.i = xor.i + 1;
    } enquanto (xor.i < 32);

    retorne xor.c;
}

inte leftrotate(inte lrot.a inte lrot.b)
{
    {
        lrot.a = lrot.a / 2 + (bit0(lrot.a) * 4294967296);
        lrot.b = lrot.b - 1;
    } enquanto (lrot.b > 0);
    
    retorne lrot.a;
}

inte i64_to_u32(inte i64)
{
    i64 = i64 * 4294967296 / 4294967296;
    entaum
        i64 = i64 + 4294967296
    se (i64 < 0);
    retorne i64;
}
